import os
import platform
from typing import List
from distutils.core import setup, Extension
from Cython.Build import cythonize


def main():
    if platform.system() == 'Darwin':
        extra_compile_args = ['-g3', '-O0', '-stdlib=libc++']
        extra_link_args = ['-stdlib=libc++']
    elif platform.system() == 'Windows':
        extra_compile_args = ['/std:c++17']
        extra_link_args = []
    else:
        extra_compile_args = ['-std=c++17']
        extra_link_args = []

    glew = ('glew', {'sources': ["src/extern/glew/src/glew.c"], 'include_dirs': ["src/extern/glew/include/"]})

    sources = [
                  "src/wbs_kernel.pyx",
                  "src/render/m2_drawing_batch.cpp",
                  "src/render/m2_drawing_mesh.cpp",
                  "src/render/wmo_drawing_mesh.cpp",
                  "src/render/wmo_drawing_batch.cpp",
                  "src/render/opengl_utils.cpp",
              ]

    include_dirs = [
                       "src/",
                       "src/render/",
                       "src/extern/glew/include/GL/",
                       "src/extern/glm/",
                       "src/extern/",
                       "src/bl_src/source/blender/blenkernel/",
                       "src/bl_src/source/blender/blenlib/",
                       "src/bl_src/source/blender/makesdna/",
                       "src/bl_src/source/blender/makesrna/",
                   ]

    setup(
        name='WoW Blender Studio Kernel',
        ext_modules=cythonize([Extension(
            "wbs_kernel",
            sources=sources,
            include_dirs=include_dirs,
            language="c++",
            extra_compile_args=extra_compile_args,
            extra_link_args=extra_link_args,
            libraries=['opengl32'] if platform.system() == 'Windows' else []
        )]
        ),
        libraries=[glew],
        requires=['Cython'])

    formatted_includes = '\n'.join([f"${{CMAKE_SOURCE_DIR}}/{include_dir}" for include_dir in include_dirs])
    formatted_sources = '\n'.join([f"${{CMAKE_SOURCE_DIR}}/{source_file}"
                        for source_file in filter(lambda x: os.path.splitext(x)[1] in ('.hpp', '.cpp', 'inl'), sources)])

    cmake_stub = \
        f"""
        \n# This file is an autogenerated cmake stub for development purposes, not for building wbs_kernel.
        \ncmake_minimum_required(VERSION 3.15)

        \nproject(wbs_kernel VERSION 0.1)
        \nset(CMAKE_CXX_STANDARD 17)
        \nset(CMAKE_CXX_STANDARD_REQUIRED ON)
        \nset(CMAKE_CXX_FLAGS_DEBUG "${{CMAKE_CXX_FLAGS_DEBUG}} -O0")
                       
        \ninclude_directories(
          \n{formatted_includes}
        \n)
        
        \nadd_library(wbs_kernel
          \n{formatted_sources}
        \n)
        
        \nset_target_properties(wbs_kernel PROPERTIES PREFIX "" OUTPUT_NAME "wbs_kernel<$<CONFIG:Debug>:d>")
        """

    with open('CMakeLists.txt', 'w') as f:
        f.write(cmake_stub)


if __name__ == '__main__':
    main()
